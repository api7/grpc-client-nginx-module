// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ClientStreamClient is the client API for ClientStream service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ClientStreamClient interface {
	Recv(ctx context.Context, opts ...grpc.CallOption) (ClientStream_RecvClient, error)
}

type clientStreamClient struct {
	cc grpc.ClientConnInterface
}

func NewClientStreamClient(cc grpc.ClientConnInterface) ClientStreamClient {
	return &clientStreamClient{cc}
}

func (c *clientStreamClient) Recv(ctx context.Context, opts ...grpc.CallOption) (ClientStream_RecvClient, error) {
	stream, err := c.cc.NewStream(ctx, &ClientStream_ServiceDesc.Streams[0], "/stream.ClientStream/Recv", opts...)
	if err != nil {
		return nil, err
	}
	x := &clientStreamRecvClient{stream}
	return x, nil
}

type ClientStream_RecvClient interface {
	Send(*RecvReq) error
	CloseAndRecv() (*RecvResp, error)
	grpc.ClientStream
}

type clientStreamRecvClient struct {
	grpc.ClientStream
}

func (x *clientStreamRecvClient) Send(m *RecvReq) error {
	return x.ClientStream.SendMsg(m)
}

func (x *clientStreamRecvClient) CloseAndRecv() (*RecvResp, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(RecvResp)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ClientStreamServer is the server API for ClientStream service.
// All implementations must embed UnimplementedClientStreamServer
// for forward compatibility
type ClientStreamServer interface {
	Recv(ClientStream_RecvServer) error
	mustEmbedUnimplementedClientStreamServer()
}

// UnimplementedClientStreamServer must be embedded to have forward compatible implementations.
type UnimplementedClientStreamServer struct {
}

func (UnimplementedClientStreamServer) Recv(ClientStream_RecvServer) error {
	return status.Errorf(codes.Unimplemented, "method Recv not implemented")
}
func (UnimplementedClientStreamServer) mustEmbedUnimplementedClientStreamServer() {}

// UnsafeClientStreamServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ClientStreamServer will
// result in compilation errors.
type UnsafeClientStreamServer interface {
	mustEmbedUnimplementedClientStreamServer()
}

func RegisterClientStreamServer(s grpc.ServiceRegistrar, srv ClientStreamServer) {
	s.RegisterService(&ClientStream_ServiceDesc, srv)
}

func _ClientStream_Recv_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ClientStreamServer).Recv(&clientStreamRecvServer{stream})
}

type ClientStream_RecvServer interface {
	SendAndClose(*RecvResp) error
	Recv() (*RecvReq, error)
	grpc.ServerStream
}

type clientStreamRecvServer struct {
	grpc.ServerStream
}

func (x *clientStreamRecvServer) SendAndClose(m *RecvResp) error {
	return x.ServerStream.SendMsg(m)
}

func (x *clientStreamRecvServer) Recv() (*RecvReq, error) {
	m := new(RecvReq)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ClientStream_ServiceDesc is the grpc.ServiceDesc for ClientStream service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ClientStream_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "stream.ClientStream",
	HandlerType: (*ClientStreamServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Recv",
			Handler:       _ClientStream_Recv_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "proto/stream.proto",
}
