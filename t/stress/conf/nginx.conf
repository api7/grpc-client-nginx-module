daemon off;
master_process on;
worker_processes 1;
error_log logs/error.log error;
worker_rlimit_nofile 20480;

events {
    worker_connections 10240;
}

worker_shutdown_timeout 1;
thread_pool grpc-client-nginx-module threads=1;

http {
    access_log off;
    server_tokens off;
    more_clear_headers Server;
    keepalive_requests 10000;
    #lua_package_path "lib/?.lua;;";

    grpc_client_engine_path ./grpc-engine/libgrpc_engine.so;
    init_worker_by_lua_block {
        local gcli = require("resty.grpc")
        assert(gcli.load("t/testdata/rpc.proto"))
        local conn = assert(gcli.connect("127.0.0.1:2379"))
        local timeout_conn = assert(gcli.connect("127.0.0.1:2376"))

        package.loaded.conn = conn
        package.loaded.timeout_conn = timeout_conn
    }

    server {
        listen 2376 http2;

        location / {
            access_by_lua_block {
                ngx.sleep(1)
            }
            grpc_pass         grpc://127.0.0.1:2379;
        }
    }

    server {
        listen 6666 reuseport;
        location /etcd_get {
            access_by_lua_block {
                local conn = package.loaded.conn
                local res, err = conn:call("etcdserverpb.KV", "Range", {key = 'k'})
                if not res then
                    ngx.say(err)
                    return
                end
                local kv = res.kvs[1]
                if kv == nil then
                    ngx.say(kv)
                    return
                end
                ngx.say(kv.key, " ", kv.value)
            }
        }
        location /timeout {
            access_by_lua_block {
                local conn = package.loaded.conn
                local res, err = conn:call("etcdserverpb.KV", "Range", {key = 'k'}, {timeout = 0.05})
                if not res then
                    ngx.say(err)
                else
                    ngx.say("expected to fail")
                end
            }
        }
    }
}
