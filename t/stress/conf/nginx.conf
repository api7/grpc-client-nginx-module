# Copyright 2022 Shenzhen ZhiLiu Technology Co., Ltd.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

daemon off;
master_process on;
worker_processes 1;
error_log logs/error.log warn;
worker_rlimit_nofile 20480;

events {
    worker_connections 10240;
}

worker_shutdown_timeout 1;
thread_pool grpc-client-nginx-module threads=1;

http {
    access_log off;
    server_tokens off;
    more_clear_headers Server;
    keepalive_requests 10000;
    #lua_package_path "lib/?.lua;;";

    init_worker_by_lua_block {
        local gcli = require("resty.grpc")
        assert(gcli.load("t/testdata/rpc.proto"))
        assert(gcli.load("t/backend/proto/test.proto"))
        local conn = assert(gcli.connect("127.0.0.1:2379"))
        local timeout_conn = assert(gcli.connect("127.0.0.1:2376"))
        local echo_conn = assert(gcli.connect("127.0.0.1:50051"))

        package.loaded.conn = conn
        package.loaded.timeout_conn = timeout_conn
        package.loaded.echo_conn = echo_conn
    }

    server {
        listen 2376 http2;

        location / {
            access_by_lua_block {
                ngx.sleep(1)
            }
            grpc_pass         grpc://127.0.0.1:2379;
        }
    }

    server {
        listen 6666 reuseport;
        location /etcd_get {
            access_by_lua_block {
                local conn = package.loaded.conn
                local res, err = conn:call("etcdserverpb.KV", "Range", {key = 'k'})
                if not res then
                    ngx.say(err)
                    return
                end
                local kv = res.kvs[1]
                if kv == nil then
                    ngx.say(kv)
                    return
                end
                ngx.say(kv.key, " ", kv.value)
            }
        }
        location /etcd_put {
            access_by_lua_block {
                local gcli = require("resty.grpc")
                local conn = assert(gcli.connect("127.0.0.1:2379"))
                local res, err = conn:call("etcdserverpb.KV", "Put", {
                                           key = ngx.var.arg_key,
                                           value = ngx.var.arg_value,
                                           })
                if not res then
                    ngx.status = 503
                    ngx.say(err)
                    return
                end
                ngx.say("ok")
                conn:close()
            }
        }
        location /etcd_delete {
            access_by_lua_block {
                local gcli = require("resty.grpc")
                local conn = assert(gcli.connect("127.0.0.1:2379"))
                local res, err = conn:call("etcdserverpb.KV", "DeleteRange", {
                                           key = ngx.var.arg_key,
                                           })
                if not res then
                    ngx.status = 503
                    ngx.say(err)
                    return
                end
                ngx.say("ok")
                conn:close()
            }
        }
        location /etcd_watch {
            access_by_lua_block {
                local cjson = require("cjson")
                local conn = package.loaded.conn
                local st, err = conn:new_server_stream("etcdserverpb.Watch", "Watch",
                                                       {create_request =
                                                            {key = ngx.var.arg_key}},
                                                       {timeout = 30000})
                if not st then
                    ngx.status = 503
                    ngx.say(err)
                    return
                end

                for i = 1, (ngx.var.arg_count or 10) do
                    local res, err = st:recv()
                    ngx.log(ngx.WARN, "received ", cjson.encode(res))
                    if not res then
                        ngx.status = 503
                        ngx.say(err)
                        break
                    end

                    if i == 1 then
                        -- tell the client we now start to watch
                        ngx.send_headers()
                        ngx.flush(true)
                    end

                    for _, e in ipairs(res.events) do
                        ngx.say(e.type, " ", e.kv.key, e.kv.value ~= "" and (" " .. e.kv.value) or "")
                        ngx.flush(true)
                    end
                end

                st:close()
            }
        }
        location /timeout {
            access_by_lua_block {
                local conn = package.loaded.conn
                local res, err = conn:call("etcdserverpb.KV", "Range", {key = 'k'}, {timeout = 0.05})
                if not res then
                    ngx.say(err)
                else
                    ngx.say("expected to fail")
                end
            }
        }
        location /echo {
            access_by_lua_block {
                local conn = package.loaded.echo_conn
                local st, err = conn:new_bidirectional_stream("test.BidirectionalStream", "Echo",
                                                              {data = ngx.var.arg_data or "a"})
                if not st then
                    ngx.say(err)
                    return
                end

                local data, err = st:recv()
                if not data then
                    ngx.say(err)
                    return
                end

                ngx.say(data.data)
            }
        }
    }
}
